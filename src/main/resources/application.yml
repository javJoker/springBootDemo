server:
  port: 8080                                     # 端口号
  tomcat:
    uri-encoding: UTF-8

spring:
  profiles:
    active: dev  # 指明要使用的配置文件
  ## Freemarker 配置
  freemarker:
    # 设定模板的加载路径，多个以逗号分隔，默认: ["classpath:/templates/"]
    template-loader-path: classpath:/templates/
    # 启用模板缓存
    cache: false
    # 模板编码
    charset: utf-8
    # 检查模板位置是否存在
    check-template-location: true
    # Content-Type值
    content-type: text/html
    # 设定所有request的属性在merge到模板的时候，是否要都添加到model中.
    expose-request-attributes: false
    # 设定所有HttpSession的属性在merge到模板的时候，是否要都添加到model中.
    expose-session-attributes: false
    # 设定是否以springMacroRequestContext的形式暴露RequestContext给Spring’s macro library使用
    expose-spring-macro-helpers: false
    # 指定HttpServletRequest的属性是否可以覆盖controller的model的同名项
    allow-request-override: false
    # 设定所有HttpSession的属性在merge到模板的时候，是否要都添加到model中
    allow-session-override: false
#    request-context-attribute: request          # 所有视图的RequestContext属性的名称。
    suffix: .ftl                                 # 后缀名
#    prefix:                                     # 前缀名
  ## 字符集编码设置
  http:
    encoding:
      force: true
      charset: UTF-8
      enabled: true
  # spring security 配置
#  security:
#    user:
#      name: user
#      password: user
#  session:
#    store-type: redis
#    redis:
#      flush-mode: on_save

#    spring.config.name=自定义的配置文件名称
#    spring.config.location=配置文件位置（可以是classpath或者有效url)

#  mybatis 配置
#  mybatis.config：mybatis-config.xml配置文件的路径
#  mybatis.typeHandlersPackage：扫描typeHandlers的包
#  mybatis.checkConfigLocation：检查配置文件是否存在
#  mybatis.executorType：设置执行模式（SIMPLE, REUSE, BATCH），默认为SIMPLE
mybatis:
  mapper-locations: classpath:mapping/**/*.xml
  config-location: classpath:mybatis-config.xml
  check-config-location: true
